<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Simon Says</title>
<link>https://simonguest.com/</link>
<atom:link href="https://simonguest.com/index.xml" rel="self" type="application/rss+xml"/>
<description>The blog of Simon Guest</description>
<generator>quarto-1.7.33</generator>
<lastBuildDate>Tue, 06 Aug 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>Creating a Document-Driven Culture</title>
  <link>https://simonguest.com/p/creating-a-document-driven-culture/</link>
  <description><![CDATA[ 





<p>When I was interviewing at Code.org, I asked whether there was a document-driven culture, one where well-written documents were the primary mechanism for driving decisions in the organization. The answer was a resounding yes!</p>
<p>What I found is that like many other organizations, Code.org had a lot of documents, but they were often short and used for brainstorming. While these can be useful for generating ideas, based on my prior experience at Amazon, I advocated for a truly document-driven culture. While we still have work to do, adopting this culture is helping us increase the quality of our documents, explore ideas in more depth, and reach quicker decisions and outcomes.</p>
<p>In this document, I’ll share my experience of working in - and creating - a document-driven culture. This includes the advantages I see within my own teams and the elements of the writing and reading culture. I will conclude by exploring how your organization might benefit from embracing a document-driven culture and share the next steps for adopting this within your teams.</p>
<section id="benefits-of-a-document-driven-culture" class="level1">
<h1>Benefits of a Document-Driven Culture</h1>
<p>I’ve often observed five major benefits of organizations who adopt a document-driven culture:</p>
<section id="deeper-thinking-ahead-of-proposing-ideas" class="level2">
<h2 class="anchored" data-anchor-id="deeper-thinking-ahead-of-proposing-ideas">Deeper thinking ahead of proposing ideas</h2>
<p>Writing is hard. It’s more challenging to write a document than it is to put together bullet points. A well-written document can take days and weeks of preparation and requires you to think deeply about the topic. Putting an idea into words often requires you to explore different angles, resulting in a higher quality and well-tested idea.</p>
<p>A document also forces you to challenge your own assumptions. There have been several occasions when I’ve started a document only to give up halfway - or pivot to a different proposal - as I realized my original idea wasn’t as good as I had initially thought.</p>
</section>
<section id="increased-employee-engagement-especially-in-a-remote-setting" class="level2">
<h2 class="anchored" data-anchor-id="increased-employee-engagement-especially-in-a-remote-setting">Increased employee engagement, especially in a remote setting</h2>
<p>In today’s Zoom-based culture, it’s challenging to maintain engagement, especially when presenting an idea. Many of us are guilty of half-listening to a presentation on Zoom, while keeping up with Slack and Email, only to return after the meeting with questions that were already covered.</p>
<p>A document-driven culture is not just about writing documents, but also has strict rituals on how to read them in a group. These rituals can feel strange when you first try them, but they increase engagement and focus from every participant.</p>
</section>
<section id="getting-input-from-everyone-in-the-room" class="level2">
<h2 class="anchored" data-anchor-id="getting-input-from-everyone-in-the-room">Getting input from everyone in the room</h2>
<p>A slide deck (or a conversation without a document) can create meetings with power dynamics. If, as a manager, I’m trying to communicate a change in direction via a presentation, my reports may be hesitant to speak up or challenge some of my assumptions - or be unaware at what point in the conversation they can interrupt.</p>
<p>A document-driven culture eliminates this by providing structured opportunities where everyone, regardless of seniority or title, has ample time to ask questions and provide feedback on a document.</p>
</section>
<section id="resolute-decision-making" class="level2">
<h2 class="anchored" data-anchor-id="resolute-decision-making">Resolute decision making</h2>
<p>In many organizations, conversations around a new idea don’t reach a decision point until after several meetings. Often, in many of these meetings, we’ll also discover we need additional data which requires yet another meeting.</p>
<p>A well-written document avoids this plethora of meetings by including all data, options, and recommendations, which reduces ambiguity and provides a clearer outcome.</p>
</section>
<section id="historical-knowledge-of-decisions" class="level2">
<h2 class="anchored" data-anchor-id="historical-knowledge-of-decisions">Historical knowledge of decisions</h2>
<p>Finally, a document-driven culture leaves a paper trail for others to follow in the future, explaining the rationale behind a decision or other options that were considered.</p>
<p>Without a document, others, especially new employees, lack the context of the conversation and data, and end up relying on folklore to understand how decisions were made.</p>
</section>
</section>
<section id="when-and-how-to-write-a-document" class="level1">
<h1>When and How to Write a Document</h1>
<p>A document-driven culture doesn’t mean writing a document for every occasion. You should write a document when you need input into an idea or proposal and/or want to reach a decision from a group of individuals.</p>
<p>One-way sharing of information to a large audience such as a “lunch and learn” or an “all staff” update doesn’t benefit as much from being a document and a slide deck is still a great tool for these occasions.</p>
<p>As you prepare to put together a document, consider the format that will work best. Here are some formats I’ve used in the past:</p>
<p><strong>2-Pager</strong>: As the name suggests, these are 2-page documents, used for quick proposals, often decisions that have a minor impact or can be reversed. For example, my team might write a 2-pager to propose an upcoming change in a deployment window.</p>
<p><strong>6-Pager</strong>: For more in-depth proposals, I recommend a 6-page document. This is the format for a large change in direction or a decision that is very difficult to undo, such as reducing the cost of an item for customers. These documents can be up to (but should not exceed) 6-pages for the main narrative. They can, however, include appendices for supporting data.</p>
<p><strong>PRFAQ</strong>: As written about in Working Backwards: Insights, Stories, and Secrets from Inside Amazon [Bryar, Carr], Amazon uses a Press Release with Frequently Asked Questions (PRFAQ) document for new product ideas. The document is 6 pages, with the first page being a fictitious press release from the future introducing the product and how it will work on launch day. A list of frequently asked questions follows, written both from an internal (Amazon) and external (customer) perspective.</p>
<p><strong>OP1 and OP2</strong>: for annual planning, Amazon uses two 6-page documents called OP1 and OP2. Each organization creates their OP1 in Q3 of the calendar year, outlining the investments they will make in the following year. After the finance group approves budgets, groups create an OP2 (in Q1 of the following calendar year) forecasting the overall spend.</p>
<p>Although the PRFAQ and OP1/OP2 are useful formats, as I’ve used documents with my teams, I’ve tried to avoid creating my own templates, instead encouraging everyone in the organization to read other documents and develop their own formats and writing style.</p>
<section id="opinionated-and-customer-focused-with-input-from-others" class="level2">
<h2 class="anchored" data-anchor-id="opinionated-and-customer-focused-with-input-from-others">Opinionated and customer-focused, with input from others</h2>
<p>Regardless of the document format and length, the strongest documents have three core elements:</p>
<p>First, documents should be opinionated. You shouldn’t create a document that presents three options and ask for a discussion. Instead, create a document that presents three options together with a recommendation. The resulting discussion is more effective and becomes a yes/no decision on whether this is the right approach and how to move forward.</p>
<p>An opinionated document has a second side-effect of leaving a good paper trail. With an opinionated document, employees can go back and understand which options the team considered, the trade-offs, and the final recommendation.</p>
<p>Second, your documents should always link back to the customer, even if the customer is internal, such as another group in your organization. Many of the best documents I’ve read are the ones that intimately connect back to the benefits for the customer, even if the subject did not directly affect a consumer-facing product.</p>
<p>Finally, documents should have relevant input from all stakeholders. You will be the primary author for your document, but it still needs to have input and ideas from others, especially if they will not be in the room for the review. I’ve often found this important for product proposals, where each document should have projected financial data provided ahead of time by the finance team.</p>
</section>
<section id="writing-style" class="level2">
<h2 class="anchored" data-anchor-id="writing-style">Writing style</h2>
<p>Writing style is very important. At Amazon, shortly after joining, I attended my first writing training, required for all new employees. A few years prior at Microsoft, I had been an editor-in-chief of a popular developer magazine, so I felt confident I knew how to write. The feedback I received from the training was, however, quite humbling.</p>
<p>I discovered I wasn’t writing in the active voice, had many consistency errors, and the editor running the training returned my writing sample in a bloodbath of red ink, highlighting many more corrections.</p>
<p>Even after Amazon, this remains an area I continue to develop. I’ve since found that creating and using my own style guide helps. A personal style guide acts as a set of rules and checklist, ensuring consistency throughout a document beyond what a spelling and grammar checker can provide.</p>
</section>
</section>
<section id="how-to-read-a-document" class="level1">
<h1>How to Read a Document</h1>
<p>Writing documents is not the only thing required for a document-driven culture. How to read is equally, if not more, important. While re-learning how to read might sound strange, I’ve found there are several aspects important to a document-driven culture.</p>
<p>First, there should be no pre-reading of documents. While it might seem expedient to send out a document the night before, it changes the dynamics of the meeting. Unless everyone pre-reads the document (which is never the case), some people come into the meeting with the context of the document and others don’t. Realizing this, what typically happens is “we’ll give 5 minutes for those who could not pre-read”, which is simply not enough time for everyone in the group to fully understand the document. As a result, everyone is on a different page, pun intended, and the meeting is not as effective as it could have been.</p>
<p>Instead, in a document-driven culture, the author of the document distributes the document at the start of the meeting (and not earlier). If meeting in person, the author can print out paper copies for everyone in the room. In a remote setting, the author will share the link to the document once the review begins.</p>
<p>After distributing the document, it’s critical to allocate enough time for everyone to read. For a 2-page document, I suggest 10-15 minutes of reading time with 20-40 minutes of discussion time. For a 6-page document, I allocate 20-25 minutes of reading time (more if there are many appendices) and 40-70 minutes of discussion time. To ensure enough time, most of my 6-pager reviews at Amazon were a minimum of 90 minutes, some 2 hours. This might seem like a long meeting to cover just one topic, but remember the goal is to take the audience from not having heard of the idea to the group making a decision.</p>
<p>During the reading time, the group reads in silence. In a meeting with paper documents, readers use pens to scribble down their notes and questions in the margin. For an online meeting with an electronic document, inline comments work equally well. And silence means silence. Unless there is an urgent request (for example, “I don’t have access to the document”) no one should verbally interrupt when everyone is reading.</p>
<p>Approaching the end of the reading time, the author of the document (and by proxy, facilitator of the meeting) should confirm whether anyone needs more time. Everyone reads at different speeds depending on their familiarity with the topic and it’s the author’s responsibility to ensure that everyone has had ample time to read the document in its entirety.</p>
<p>Once everyone has finished reading, the meeting can now switch to discussion. Instead of opening the floor to everyone, however, there is also a format for facilitating this.</p>
<section id="getting-feedback" class="level2">
<h2 class="anchored" data-anchor-id="getting-feedback">Getting feedback</h2>
<p>First, the author should ask if there are high-level questions or comments about the document. This opens up for any general feedback, such as confirmation that other individuals outside of the review have also seen and contributed to the document. These high-level comments rarely get into a discussion about the idea, unless there is something obvious about the approach. For example, “Didn’t we try something similar three years ago?”</p>
<p>After everyone has shared their overall comments, the author, now facilitator, invites feedback on a page-by-page basis. A good lead-in for this will be, “Are there any comments on page 1?” The group now reviews their notes, and the floor is open for discussion. In a setting with printed copies of the document, line numbers in the document help the reader precisely refer to part of the document. For example, “On line 24, you mention that you’ve seen increased bug reports. Do you have data that supports this?”</p>
<p>Once everyone has had an opportunity to provide feedback on page 1, the author/facilitator will move on to page 2, then page 3, and so on. For longer documents, there’s no need to review the appendices page-by-page. Once the group reaches the end of the document, the author asks for any final feedback before moving on to recommendations.</p>
<p>As the document was opinionated, the author should have everything they need to move forward. The outcome could be that the group agrees with the approach and wants to move forward. Alternatively, during the discussion, maybe the group preferred another option or a different approach. Finally, while it was rare, one outcome could be that the group felt they needed more information. Here, the group asks the author to update the document and set up additional time for a further review.</p>
</section>
</section>
<section id="sidebar-how-to-review-a-document" class="level1">
<h1>Sidebar: How to Review a Document</h1>
<p>At Amazon, my direct reports would often ask me to review documents they were preparing for their own review. While it was likely that I would be in the meeting, I was keen to ensure that the quality of the document reflected well on our group and organization.</p>
<p>When a document was nearing completion, I would set up a review with my direct report and their team. Using the same time allocated to the meeting, we would do a “trial read” of the document. After the review, I would structure my feedback into two parts: the validity of the proposal and whether it needed adjusting, and the readability of the document. This second part was valuable as it provided the team with a fresh set of eyes on the document and often highlighted structural changes that may help the audience better understand the proposal.</p>
</section>
<section id="does-a-document-driven-culture-result-in-fewer-meetings" class="level1">
<h1>Does a Document-Driven Culture Result in Fewer Meetings?</h1>
<p>Yes, and no.</p>
<p>On one hand, a document-driven culture can significantly reduce the number of “regular sync up” meetings we all have on our calendars. In a document-driven culture, authors only schedule a meeting once a document is complete and ready to be reviewed. This is more efficient than a recurring cadence, where the same topics keep coming up, often without resolution.</p>
<p>A document-driven culture can also reduce ad hoc meetings that should be document reviews. Often, people will reach out and want time to discuss an idea. A document-driven culture supports reducing these types of requests and encouraging deeper thinking, with “That idea sounds interesting. Let’s meet when you have a document to read and we can go into more detail.”</p>
<p>Back to the original question of fewer meetings, the “no” part of this answer brings us back to the fact that writing is hard. Preparing a well-written document takes time, and you will spend much of this reviewing and seeking input from others prior to presenting the document in the final review.</p>
<p>To summarize, while a document-driven culture is not necessarily a time-saver in terms of calendar time, the meetings that will be held are much more effective in helping the author and the organization drive towards a clearer and more expedient decision.</p>
</section>
<section id="implementing-a-document-driven-culture-in-your-own-organization" class="level1">
<h1>Implementing a Document-Driven Culture in Your Own Organization</h1>
<p>I hope this article has provided a glimpse into the benefits of a document-driven culture. If you are interested in exploring this within your own organization, I would recommend these three first steps:</p>
<p><strong>Practice it in a small group</strong>: A document-driven approach only works if everyone takes part. This is especially important for the rituals required for reading during a review. You can pilot this with a small group - it doesn’t have to be the entire organization at once. When proposing the idea to your group, I recommend advocating “trying this new approach over the next quarter” as many may be hesitant to give up their slide decks permanently!</p>
<p>Over these three months, each member of the group should choose to write a 6-page document on one idea or proposal they are working on. To review their document, they will get the right people together - in a separate review meeting vs.&nbsp;any existing recurring meetings - and practice facilitating reading at the meeting.</p>
<p>At the end of the quarter, the group can review findings and, if successful, decide on what an org-wide rollout could look like.</p>
<p><strong>Invest in writing skills</strong>: To support writing stronger documents over these three months, the group should also make a commitment to invest in education to improve their writing skills. This might include reading books or articles, or installing grammar checking tools.</p>
<p><strong>Support each other</strong>: Finally, to further support this education, it’s also important to give feedback to each other. While it might feel uncomfortable to comment on the spelling, grammar, format, or structure of a colleague’s document, it’s an essential skill that will help improve the quality of all the written materials in your organization.</p>


</section>

 ]]></description>
  <category>Technical Leadership</category>
  <guid>https://simonguest.com/p/creating-a-document-driven-culture/</guid>
  <pubDate>Tue, 06 Aug 2024 00:00:00 GMT</pubDate>
  <media:content url="https://simonguest.com/p/creating-a-document-driven-culture/main.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Should CTOs Write Code?</title>
  <link>https://simonguest.com/p/should-ctos-write-code/</link>
  <description><![CDATA[ 





<p>Should CTOs - or VPs, Directors, Engineering Managers, or any other technical manager role - write code?</p>
<p>It’s a polarizing question. The answer often depends on your background, definition of what a CTO should do, and the size of your organization.</p>
<p>It’s a question I’ve struggled with for many years. I’ve regularly asked myself what, if any, code should I be writing? How can I add value without undermining the engineers on my team? And when I write code, why do I always feel guilty?</p>
<section id="why-write-code-as-cto" class="level1">
<h1>Why Write Code as CTO?</h1>
<p>As CTO, I’ve found several advantages of remaining an individual contributor. First, it draws on my experience. I started my career as a software engineer and I often see patterns that earlier-in-career engineers have yet to experience.</p>
<p>Writing code also keeps me close to the technology. This has proved to be a good BS detector for when engineers are taking a direction that just doesn’t feel right.</p>
<p>Finally, I’ve found writing code is useful to explore emerging trends. I typically learn by doing vs.&nbsp;reading. A couple of hours with a new stack can be valuable to understand the possibilities of a new technology.</p>
<section id="cons-of-writing-code-as-cto" class="level2">
<h2 class="anchored" data-anchor-id="cons-of-writing-code-as-cto">Cons of writing code as CTO</h2>
<p>Now, of course, writing code as CTO is a double-edged sword.</p>
<p>On one hand, my code may not be of the highest quality (even though secretly I refuse to believe it!) This can introduce a challenging power dynamic when I submit a pull request and other engineers need to provide critical feedback.</p>
<p>In addition, if my code is on the critical path, it has the potential to cause production issues. The team shouldn’t get paged in the middle of the night to resolve a bug that the CTO inadvertently checked in.</p>
<p>Finally, it doesn’t scale. Locking myself in my office writing code takes me away from other tasks that help the organization more forward. In a former role as VP of Engineering, I was in the middle of a “personal project,” debugging a prototype, when one of my engineers came to me and said, “It’s great that you are working on that, but I really need you to do some ‘vp-ing’ right now.”</p>
<p>So, should CTOs write code? I was recently discussing this question with my coach, <a href="https://www.linkedin.com/in/jimsvagerko/">Jim Svagerko</a>. He introduced me to a framework that introduces seven developmental action logics. I found this framework offered a new and interesting lens through which to answer the question.</p>
</section>
</section>
<section id="seven-kinds-of-action-logic" class="level1">
<h1>Seven Kinds of Action Logic</h1>
<p>In April 2005, David Rooke and William R. Torbert published an article in Harvard Business Review called Seven Transformations of Leadership <a href="https://hbr.org/2005/04/seven-transformations-of-leadership">[link]</a>. This article summarized the results of a multi-year survey sent to thousands of leaders across hundreds of organizations. The goal of the survey was to search for data that complete the sentence, “A good leader…”</p>
<p>The results enabled the researchers to create seven layers of action logics: Opportunist, Diplomat, Expert, Achiever, Individualist, Strategist, and Alchemist. Action logics are how leaders interpret their surroundings and react when their power or safety is challenged.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://simonguest.com/p/should-ctos-write-code/framework.webp" class="img-fluid figure-img"></p>
<figcaption>The Action Logic Framework</figcaption>
</figure>
</div>
<p>Here’s a quick rundown of each:</p>
<p><strong>Opportunist</strong>: Wins in any way possible. Self-oriented, manipulative, “might makes right.”Good in emergencies and sales opportunities.In the survey, 5% of leaders profiled as this action logic</p>
<p><strong>Diplomat</strong>: Avoids overt conflict. Wants to belong; obeys group norms; rarely rocks the boat. Good as supportive glue within an office; helps bring people together. 12% profiled as this action logic.</p>
<p><strong>Expert</strong>: Rules through logic and expertise. Seeks rational efficiency.Good as individual contributor.38% profiled as this action logic.</p>
<p><strong>Achiever</strong>: Meets strategic goals. Effectively achieves goals through teams; juggles managerial duties and market demands.Well suited to managerial roles; action and goal oriented.30% profiled as this action logic.</p>
<p><strong>Individualist</strong>: Interweaves competing personal and company action logics. Creates unique structures to resolve gaps between strategy and performance.Effective in venture and consulting roles.10% profiled as this action logic.</p>
<p><strong>Strategist</strong>: Generates organizational and personal transformations. Exercises the power of mutual inquiry, vigilance, and vulnerability for both the short and long term.Effective as a transformational leader.4% profiled as this action logic.</p>
<p><strong>Alchemist</strong>: Generates social transformations. Integrates material, spiritual, and societal transformation.Good at leading society-wide transformations.1% profiled as this action logic.</p>
<p>Reading through these, there are probably leaders you’ve worked with (or you report to) who you can place in one of these profiles. You may even guess where you fit.</p>
<p>When I first read through this, I immediately gravitated towards Achiever. Like many CTOs, much of my responsibility is ensuring my engineers and teams are successful based on their needs and the outcomes of the organization.</p>
<p>As I studied the framework, however, I asked myself, “Which action logic do I gravitate to when I write code?”</p>
<p>This is where it gets interesting. Looking through the list of action logics, Expert seems to be a logical choice. After all, in my individual contributor roles before leadership, I was often the subject expert in the room.</p>
<p>I believe <em>Expert</em>, however, is the wrong profile for CTOs (or any technical manager) to be adopting when doing IC work.</p>
<p>First, I don’t want to be the expert in the room. Even though I may have prior subject expertise, the organization shouldn’t be relying on me solely for this.</p>
<p>Instead, I want to grow others in my organization to be experts. This is how the organization gets stronger, and I want these individuals to feel ownership of what they create.</p>
<p>Finally, I never want to hear “That’s cool, but I was hoping to work on that…” No matter how good my solution might be, it’s an anti-pattern for code I write to be taking away opportunities for other engineers in the organization.</p>
<section id="dont-be-the-expert" class="level2">
<h2 class="anchored" data-anchor-id="dont-be-the-expert">Don’t be the expert!</h2>
<p>As I reflected more on this, I realized that whenever I’ve written code as an <em>Expert</em>, it has always backfired.</p>
<p>At Concur, we were developing our first set of partner integrations. I was new to my role and insisted that I jointly work with engineers to develop one of our connectors (even to the point of organizing a mini-hackathon!) Let’s just say the appetite for the project was low.</p>
<p>Also at Concur, I remember we were about to show our new expense product at our annual conference. While I was thrilled with the product, I couldn’t stand the “loading spinner” the team had copied and pasted from our previous product.</p>
<p>The team was running up against the deadline, so I wrote a new spinner and checked it in. While the demo looked smoother, I didn’t make many friends for bypassing the process (and they rightfully replaced it with a much better one when we got back.)</p>
<p>Finally, at Code.org, I’ve been trying to migrate our development environment into containers. While it’s been intellectually rewarding, it’s been challenging to advocate this to other engineers - one reason being that I’m not in the position of having to use and maintain this every day.</p>
<p>When I’ve written code while in the mode of an <em>Expert</em> action logic, I’ve often faced resistance. The code has not been adopted or it seems to have caused more downstream issues than the problems it was trying to solve.</p>
<p>What’s the answer? Let’s revisit the action logic diagram:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://simonguest.com/p/should-ctos-write-code/framework.webp" class="img-fluid figure-img"></p>
<figcaption>The Action Logic Framework</figcaption>
</figure>
</div>
<p>Instead of going from Achiever to Expert, when I think about contributing by writing code at CTO, I should instead look the other way - specifically to <em>Strategist</em>.</p>
</section>
<section id="writing-code-as-strategist" class="level2">
<h2 class="anchored" data-anchor-id="writing-code-as-strategist">Writing code as Strategist</h2>
<p>In this action logic, the code that I write can set a vision. For example, “I had an idea how we can solve X. I’ve put together a quick prototype that shows the potential. What do you think?”</p>
<p>Work aligned to this action logic is work that my engineers are not doing. It’s often exploring a future state or a lateral direction that’s not part of our defined roadmap.</p>
<p>In addition, the Strategist action logic produces code that is not on the critical path. Even if they adopt the approach, the team should take my prototype and rewrite it from scratch.</p>
<p>Thinking back, my most successful coding contributions have been when I’ve been operating in this <em>Strategist</em> action logic.</p>
<p>At Concur, I created a prototype of using GraphQL to serve travel requests. It was simple and used stubbed-out data, but it paved the way for a new set of APIs (which the team thankfully wrote from scratch.)</p>
<p>At Amazon, I prototyped a new technique for encrypting image data. It was well beyond the current product horizon, but helped with future planning cycles and eventually led to a patent.</p>
<p>And at Code.org, I put together a quick prototype that showed how music could help teach computer science concepts. What started as a “I think there might be something here” has evolved into a wider pilot and a fully fledged activity we will launch later this year.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>If you find yourself asking whether you should write code as CTO - or in any engineering leadership role - I highly recommend reviewing the Action Logic Leadership Framework. It helped me understand where I gravitate to for many functions of my role, including writing code.</p>
<p>Even though it might seem natural to you, don’t be the <em>Expert</em>. Instead, align yourself to the action logic that enables you to set the <em>Strategic</em> direction for your team and organization.</p>


</section>

 ]]></description>
  <category>Technical Leadership</category>
  <guid>https://simonguest.com/p/should-ctos-write-code/</guid>
  <pubDate>Wed, 21 Feb 2024 00:00:00 GMT</pubDate>
  <media:content url="https://simonguest.com/p/should-ctos-write-code/main.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Is Using a Debugger Becoming a Lost Art?</title>
  <link>https://simonguest.com/p/is-using-a-debugger-becoming-a-lost/</link>
  <description><![CDATA[ 





<p>I was sad to learn of Niklaus Wirth’s death on New Year’s Day. In college, I used Modula-2, Pascal, and Delphi, and my love of coding may have been very different without Wirth’s contributions. May he rest in peace.</p>
<p>As I was reminiscing about languages and tools I used to use, I recalled how much time I spent in the debugger. I was always using the debugger. It was the primary tool to learn new code, understand why my code wasn’t working, and ultimately figure out how to fix it.</p>
<p>When I speak to developers today, however, especially those earlier in their career, using a debugger seems to be a lost art.</p>
<p>As an example, I was recently working with one of our developers, helping diagnose why their build was taking so long. I couldn’t help but notice they were sprinkling <em>console.log()</em> statements throughout their code to figure out whether a line had been reached and the value of a variable in scope.</p>
<p>When I asked, “Why don’t you use the debugger?” there were several reasons. Some were valid, others were myths, and many were related to their setup, but all had turned this engineer off the idea.</p>
<p>And this developer is not alone. In a <a href="https://news.ycombinator.com/item?id=32513082">recent thread</a> on Hacker News titled, “Why are we not using debuggers more?”, I found it fascinating to see the polarization of opinions in the comments.</p>
<p>In this article, I’ll expand on this and cover several reasons developers may not be using the debugger. I’ll then share the benefits of using a debugger I’ve seen in my teams and explore the potential connection between debugging and generative AI.</p>
<section id="why-dont-developers-use-a-debugger" class="level1">
<h1>Why don’t developers use a debugger?</h1>
<p><em>“It’s easier not to…”</em> - If you don’t have a debugger setup - or don’t know how to use one - this can be a valid excuse. I’ll admit it. It’s super easy to insert a console.log statement and re-run your code.</p>
<p><em>“Setting up the debugger is too complex…”</em> - Depending on your development environment, getting a working debugger can take effort. It might require creating a new runtime configuration, generating source maps, or installing specific libraries.</p>
<p><em>“The debugger never works for me…”</em> - Even when a debugger is available, sometimes it just doesn’t work. Maybe it doesn’t break when you thought it should have. Or maybe it breaks, but on a completely different line.</p>
<p><em>“I don’t know how to use it with my type of application…” </em>- For Web applications, it’s difficult to debug both the server and browser. For distributed applications, it’s challenging to attach a debugger to a remotely-running container.</p>
<p><em>“I was told that using a debugger is much slower…”</em> - Debugging an application will always be slower than running without debugging. And who wants a slower development machine?</p>
<p>How do we solve for these? I believe the above highlights the friction - or perceived friction - of using a debugger. I also believe that if more developers knew the advantages of using a debugger, more would invest the time to overcome the friction of using one.</p>
<p>To start down this path, let’s look at some advantages of using a debugger:</p>
</section>
<section id="why-use-a-debugger" class="level1">
<h1>Why use a debugger?</h1>
<section id="inspections-and-evaluations" class="level2">
<h2 class="anchored" data-anchor-id="inspections-and-evaluations">Inspections and evaluations</h2>
<p>As you probably know, debuggers enable you to inspect the value of any variable when a breakpoint is reached.</p>
<p>For example, in this computer vision application, I can use the debugger to inspect the value of the <em>delegate</em>, <em>image</em>, and <em>model</em> variables when the <em>detectObjects</em> function is called.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://simonguest.com/p/is-using-a-debugger-becoming-a-lost/screenshot-1.webp" class="img-fluid figure-img"></p>
<figcaption>Screenshot of the variables pane in VS Code Debugger</figcaption>
</figure>
</div>
<p>Many IDEs also support “inline views”, where the editor displays the values of variables in scope alongside each line of code. This can be useful for quickly seeing simple values at runtime, although you still need the inspector for complex objects.</p>
<p>Finally, most IDEs also support the evaluation of expressions at runtime. This can help support a more complex inspection or to view the output from a function.</p>
<section id="why-is-this-better-than-console.log" class="level3">
<h3 class="anchored" data-anchor-id="why-is-this-better-than-console.log">Why is this better than console.log?</h3>
<p>First, you don’t have to write any console.log statements! (And then remove them, especially after you’ve pushed your commit!)</p>
<p>More importantly, not only does a debugger show the values of variables at runtime, but it also provides the context of what else is in scope.</p>
<p>On many occasions, I’ve used a debugger and discovered a value or method that was available in a module or class - one that I hadn’t realized existed: “Wow! I didn’t realize the cv object contains the list of devices - now I don’t need to pass them separately.”</p>
</section>
</section>
<section id="dynamic-breakpoints" class="level2">
<h2 class="anchored" data-anchor-id="dynamic-breakpoints">Dynamic breakpoints</h2>
<p>As well as breakpoints that stop when the line of code is reached, debuggers also support dynamic breakpoints. These include “break on exception”, which will pause the debugger if an uncaught exception is raised, and conditional breakpoints.</p>
<p>Using a conditional breakpoint, the debugger stops only when an expression evaluates to true.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://simonguest.com/p/is-using-a-debugger-becoming-a-lost/screenshot-2.webp" class="img-fluid figure-img"></p>
<figcaption>A conditional breakpoint in VS Code Debugger</figcaption>
</figure>
</div>
<p>For example, let’s imagine I was experiencing an issue when my computer vision model was running on the CPU instead of the GPU. Using a conditional breakpoint, the debugger only breaks when the passed <em>delegate</em> variable is set to “CPU”. This enables me to ignore all the other times that the GPU was being used.</p>
<section id="why-is-this-better-than-console.log-1" class="level3">
<h3 class="anchored" data-anchor-id="why-is-this-better-than-console.log-1">Why is this better than console.log?</h3>
<p>Breaking on exception is very efficient - way more so than just logging the exception to stdout. The debugger pauses and provides all the context needed to diagnose the issue.</p>
<p>The alternative - using console.log - requires finding the exception in the logs, tracing which line caused it, inserting a console.log to write some additional values, and re-running your program (likely many times over).</p>
<p>Conditional breakpoints are equally productive, especially for edge cases. You can use these breakpoints to trap known values, such as the delegate variable in the last example, and unexpected ones - for example, stopping when a passed object is null/undefined.</p>
</section>
</section>
<section id="walking-the-call-stack" class="level2">
<h2 class="anchored" data-anchor-id="walking-the-call-stack">Walking the call stack</h2>
<p>When a debugger hits a breakpoint, besides variables, you have access to the call stack. The call stack is the sequence of calls that was made between starting the program and the current line of code being executed.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://simonguest.com/p/is-using-a-debugger-becoming-a-lost/screenshot-3.webp" class="img-fluid figure-img"></p>
<figcaption>The call stack window in VS Code Debugger</figcaption>
</figure>
</div>
<p>As shown above, in our computer vision example, the debugger has paused on a breakpoint. It’s now easy to trace the call stack - all the way from the user clicking the run button (the onclick function at the bottom of the stack) through to the <em>detectObjects</em> method being called in the cv library.</p>
<section id="why-is-this-better-than-console.log-2" class="level3">
<h3 class="anchored" data-anchor-id="why-is-this-better-than-console.log-2">Why is this better than console.log?</h3>
<p>Not only does the call stack give you visibility you wouldn’t get with a console.log statement, but it can be really useful for learning unfamiliar code.</p>
<p>Especially when I’ve run a project for the first time, the call stack provides insight into the dependencies between parts of the system. Over time, this helps me create a mental model of how everything fits together: “Oh wow, I didn’t realize that module x got called by module y.”</p>
</section>
</section>
<section id="setting-values" class="level2">
<h2 class="anchored" data-anchor-id="setting-values">Setting values</h2>
<p>Debuggers allow you to inspect values, but you may not know that you can set values at runtime as well. This is one of my favorite features, as you can change a value and often reduce the time to see the impact.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://simonguest.com/p/is-using-a-debugger-becoming-a-lost/screenshot-4.webp" class="img-fluid figure-img"></p>
<figcaption>Setting variables in VS Code Debugger</figcaption>
</figure>
</div>
<p>In the above example, I can right click on the delegate variable, manually set the value to ‘CPU’. After continuing execution, this will force the model to run on the CPU.</p>
<section id="why-is-this-better-than-console.log-3" class="level3">
<h3 class="anchored" data-anchor-id="why-is-this-better-than-console.log-3">Why is this better than console.log?</h3>
<p>I’ve often used this for a couple of scenarios. The first is to test error conditions and handling. For example, imagine a user has reported that the page crashes if they try to create an account with a username longer than 16 characters. It’s trivial to set a breakpoint, set the value of username to something longer than 16 characters, and then step through to diagnose the offending code.</p>
<p>I’ve also used this approach to jump quickly to other parts of the application. For example, set a manual breakpoint, change the value of <em>level</em> to 20, and resume the debugger.</p>
</section>
</section>
<section id="integrating-with-ai-coding-assistants" class="level2">
<h2 class="anchored" data-anchor-id="integrating-with-ai-coding-assistants">Integrating with AI coding assistants</h2>
<p>You may have used an AI coding assistant (e.g., GitHub Copilot) to help with generating code. I believe that integrating coding assistants with the debugger will take this one step further.</p>
<p>As we’ve seen in previous sections, when a debugger reaches a breakpoint, it has a lot of context about the running application. This includes the current code being executed, all the variables in scope, any exceptions, and the call stack.</p>
<p>This context is incredibly useful if sent to an LLM. In the case of an unhandled exception, the exception and all the context leading up to the exception can be fed to the LLM. This is a lot more powerful than just copying and pasting a generic exception message into ChatGPT.</p>
<p>I believe we’ll see more advanced use cases of the debugging context working hand-in-hand with an LLM. These may include providing other optimizations, such as recommending shorter call paths or eliminating redundancies.</p>
<p>This is a nascent area, with some of this functionality taking shape in the early adopter builds of GitHub Copilot. If you’d like to find out more, I recommend watching Session <a href="https://www.youtube.com/watch?v=5pbPLHYB6-0">BRK231H</a> from Microsoft’s Ignite conference in 2023. Fast forward to the 25 minute mark, where Mark Downie shows a development version of Copilot chat working alongside the debugger to diagnose an unhandled exception in his C# code.</p>
</section>
</section>
<section id="what-now" class="level1">
<h1>What Now?</h1>
<p>If you haven’t used a debugger before - or if you’ve been frustrated - I hope this article has convinced you it’s worth another try. If so, I’d recommend three next steps:</p>
<section id="get-your-environment-working" class="level2">
<h2 class="anchored" data-anchor-id="get-your-environment-working">Get your environment working</h2>
<p>Most importantly, I recommend setting aside time to set up your own development environment to support debugging. This may involve installing some additional libraries or tools - for example, installing the debug gem in a Ruby environment. To enable debugging for JavaScript and TypeScript environments, you will also need to generate source maps in your build process.</p>
<p>I’ve also found it useful to get into the habit of configuring my IDE to run the debugger by default. (To do this, you can create a single debug configuration - or, if that’s not possible, replace your keyboard shortcut for running the project to debugging instead).</p>
<p>By doing this, you’ll always have access to the debugger at runtime. When things aren’t working, it’s then easy to set a breakpoint and inspect the code vs.&nbsp;having to adjust your thinking to restarting the application with a debugger attached. (And if you are worried that your program will always be stopping, most IDEs support a “mute all breakpoints” option.)</p>
<p>One additional side effect is if you do set the debugger as the default target, you’ll likely dispel the myth that debugging is slow on today’s modern machines.</p>
</section>
<section id="become-a-evangelist-for-using-the-debugger-in-your-own-team" class="level2">
<h2 class="anchored" data-anchor-id="become-a-evangelist-for-using-the-debugger-in-your-own-team">Become a evangelist for using the debugger in your own team</h2>
<p>Once you have your environment working, one of our principal engineers at Code.org recommends becoming an evangelist in your own team. As he puts it, “don’t just enable the debugger for yourself, enable it for your teammates.”</p>
<p>This can be as simple as sharing, committing, and maintaining the IDE configuration harnesses that enable one-click debugging for your project.</p>
</section>
<section id="explore-remote-debugging" class="level2">
<h2 class="anchored" data-anchor-id="explore-remote-debugging">Explore remote debugging</h2>
<p>As you master your own development environment, I’ve encouraged my teams to go on and understand how remote debugging works, especially for those working on distributed applications.</p>
<p>This involves understanding the protocols behind remote debugging, such as GDB Remote Serial Protocol, Chrome DevTools Protocol, and Java Debug Wire Protocol, among others.</p>
<p>If you are interested in diving deeper here, I’d recommend <a href="https://www.amazon.com/Practical-Debugging-Scale-Kubernetes-Production-ebook/dp/B0BRKBP3BG">Practical Debugging at Scale [Almog]</a>, especially if you are running Java-based applications on Kubernetes.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this article, we’ve covered many of the challenges developers face with debugging and re-introduced several benefits of using a debugger: inspections and evaluations, dynamic breakpoints, walking the call stack, setting values, and integrating with AI coding assistants.</p>
<p>If you are new to using a debugger (or were just afraid to ask) I hope this has provided some ideas for exploring more. If you are a developer who was already using a debugger, I hope you’ll continue to evangelize the benefits before it truly becomes a lost art!</p>


</section>

 ]]></description>
  <category>IDEs</category>
  <category>Debugging</category>
  <category>Generative AI</category>
  <guid>https://simonguest.com/p/is-using-a-debugger-becoming-a-lost/</guid>
  <pubDate>Tue, 06 Feb 2024 00:00:00 GMT</pubDate>
  <media:content url="https://simonguest.com/p/is-using-a-debugger-becoming-a-lost/main.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>What Shape Is Your Engineering Team?</title>
  <link>https://simonguest.com/p/what-shape-is-your-engineering-team/</link>
  <description><![CDATA[ 





<p>When I meet an engineering team for the first time, I’m always intrigued to learn the “shape” of the team.</p>
<p>What do I mean by “shape”? Well, if you map the ratios of engineers across all levels in the team, you can often derive a shape from it.</p>
<p>For example, imagine a team of engineers that range from SDE-1 (entry level) to SDE-5 (principal). Let’s say the team has 15 engineers and comprises five SDE-1s, four SDE-2s, three SDE-3s, two SDE-4s, and one SDE-5.</p>
<p>If we draw a shape depicting the number of engineers at each level, we end up with a triangle:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://simonguest.com/p/what-shape-is-your-engineering-team/triangle.webp" class="img-fluid figure-img"></p>
<figcaption>A “Triangle-Shaped” Team</figcaption>
</figure>
</div>
<p>Understanding the shape of a team can offer a lot of insight. First, it provides data for hiring decisions. For example, do you need another senior engineer and if so, how will this impact the balance of the team?</p>
<p>It can also help identify mentoring opportunities by looking at the ratio of junior engineers to senior engineers who can provide guidance.</p>
<p>Finally, it can help highlight gaps and help understand the impact upcoming promotions or changes in levels may have.</p>
<p>There is no perfect shape to aspire to. Instead, I’ve found certain shapes of teams work well for different environments, various sizes of teams, and the type of product you are developing.</p>
<p>In this article, I’ll introduce fives shapes of teams I commonly come across: The triangle, the inverted triangle, the diamond, the rectangle, and hourglass.</p>
<p>For each, I’ll describe the structure of the team, the environment and products I’ve found this shape can best work for, and a few things to watch out for along the way.</p>
<section id="the-triangle" class="level1">
<h1>The Triangle</h1>
<p>As we covered this in the introduction, let’s start with the triangle.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://simonguest.com/p/what-shape-is-your-engineering-team/triangle.webp" class="img-fluid figure-img"></p>
<figcaption>A “Triangle-Shaped” Team</figcaption>
</figure>
</div>
<p>The triangle has a larger ratio of junior engineers compared to senior engineers. I’ve seen this shape (and inherited many teams of this shape) at Microsoft, SAP, and Amazon, all of whom invest heavily in college recruiting and internship programs. This investment provides a strong pipeline of SDE-1 engineers.</p>
<p>I’ve found triangle-shaped teams work for well-established products, often those that have a good balance of new feature development and existing bug fixing and operational load. With a higher ratio earlier in their career, these teams often have engineers eager to learn new skills and take on responsibilities.</p>
<p>This spread also offers mentoring opportunities with senior developers responsible for the architecture and technical direction. At AWS, one of my senior engineers would often hold weekly “learn the architecture” sessions with small groups of our recent college graduates.</p>
<p><strong>What to watch for</strong>: While these teams can be effective, if you have a team of this shape, I recommend monitoring the workload of the one or two senior or principal engineers at the top of the triangle.</p>
<p>Often, these engineers will be responsible for the architectural decisions and technical direction for new features. This, combined with what may be a heavy mentoring workload, can sometimes lead to burnout.</p>
</section>
<section id="the-inverted-triangle" class="level1">
<h1>The Inverted Triangle</h1>
<p>As the name implies, the inverted triangle is the opposite, with a larger ratio of principal and senior engineers compared to mid-level and junior engineers.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://simonguest.com/p/what-shape-is-your-engineering-team/inverted-triangle.webp" class="img-fluid figure-img"></p>
<figcaption>An “Inverted Triangle-Shaped” Team</figcaption>
</figure>
</div>
<p>I’ve found an inverted triangle team can be very effective in early-stage startups and for new product development.</p>
<p>At Amazon, I had the opportunity to build a team from scratch, responsible for developing a v1 hardware device. I optimized towards hiring a higher ratio of principal and senior engineers who came with hardware, firmware, software, and machine learning backgrounds.</p>
<p>This seniority of the team provided the years of experience we needed to get the product designed and developed - something that would have been more challenging with a more traditional triangle-shaped team.</p>
<p><strong>What to watch for</strong>: While I always learn from teams of this shape - the experience of the team often provides new angles I’m not thinking about - they can come with a couple of things to watch for.</p>
<p>First, given the seniority of many engineers in the team, it’s common to have many strong (and sometimes conflicting) opinions, especially when debating a new design or direction. With my team at Amazon, I recall having to step in often to help the team move forward with a technical decision.</p>
<p>Second, the work has to be new and engaging for engineers who bring this level of experience. Without this, there may not be enough “senior-level” work to go around, which can lead to boredom and eventual attrition.</p>
<p>Finally, while inverted triangles work well for new product development, as the product matures and needs to take on more support and maintenance tasks, there will be a need to fill out the rest of the triangle to create more balance.</p>
</section>
<section id="the-diamond" class="level1">
<h1>The Diamond</h1>
<p>The diamond is a larger ratio of mid-level engineers compared to senior and junior levels. The larger the ratio of mid-level engineers, the wider the diamond.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://simonguest.com/p/what-shape-is-your-engineering-team/triangle.webp" class="img-fluid figure-img"></p>
<figcaption>A “Diamond-Shaped” Team</figcaption>
</figure>
</div>
<p>A few of my teams, including the engineering org when I first joined Code.org, have been diamond-shaped. Often, teams develop into a diamond when an organization has had a very active college recruitment program in past years and those engineers go through a couple of promotion cycles.</p>
<p>Diamond-shaped teams can also be very effective for well-established products. The higher ratio of mid-level engineers brings the experience and understanding of the nuances of the system.</p>
<p><strong>What to watch for</strong>: If you have a diamond-shaped team, I recommend looking at the width of the diamond. If it’s too wide, there can be a high number of mid-level engineers looking for complex projects to stretch their abilities - and potentially not enough projects available to go around.</p>
<p>A wide diamond can also have the same effect for mentoring opportunities - with a larger number of mid-level engineers looking to mentor a smaller number of junior engineers. (This, however, is often easier to mitigate with interns, contractors, and other peer mentoring opportunities.)</p>
</section>
<section id="the-rectangle" class="level1">
<h1>The Rectangle</h1>
<p>A rectangular-shaped team has roughly equal ratios across each level.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://simonguest.com/p/what-shape-is-your-engineering-team/rectangle.webp" class="img-fluid figure-img"></p>
<figcaption>A “Rectangular-Shaped” Team</figcaption>
</figure>
</div>
<p>While I’ve found many large tech companies favor triangular-shaped teams, I’ve often come across rectangle-shaped teams in small and mid-sized organizations. Many of our engineering teams at Code.org are good examples.</p>
<p>Depending on the size of the engineering organization, it can also be common to see a rectangle-shaped organization and then different shapes for each of the sub-teams.</p>
<p>For established products, rectangles offer a good balance of feature development suitable for engineers at all levels. The equal ratio can also provide steady mentoring opportunities and career pathways.</p>
<p><strong>What to watch for</strong>: While the rectangle offers plenty of mentoring opportunities, it’s important to balance college recruiting and interns - as too much can push the team towards a triangle and too less can lead to fewer mentoring opportunities for mid-level engineers.</p>
</section>
<section id="the-hourglass" class="level1">
<h1>The Hourglass</h1>
<p>An hourglass-shaped team is the inverse of the diamond, with a larger number of senior and junior engineers compared to mid-level. Some hourglass-shaped teams may not even have any mid-level engineers. (I call these “air-gapped.”)</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://simonguest.com/p/what-shape-is-your-engineering-team/hourglass.webp" class="img-fluid figure-img"></p>
<figcaption>An “Hourglass-Shaped” Team</figcaption>
</figure>
</div>
<p>During my career, I’ve only come across one or two instances. Often, the hourglass shape forms when an inverted triangle team pivots to hiring college graduates (often because of slowing feature development). I’ve also seen this shape form during periods of high attrition or when two or more teams merge.</p>
<p><strong>What to watch for</strong>: I don’t recommend optimizing towards an hourglass-shaped team, as in extreme cases, it can create a disconnect between the senior and junior engineers on the same team.</p>
<p>This can impact technical decision making, where senior engineers make all decisions and don’t involve the rest of the team. This shape can also introduce mentoring challenges, especially if senior engineers prefer to mentor mid-level vs.&nbsp;early career engineers.</p>
<p>The combination of the above can lead to senior engineers feeling frustrated that other engineers are not contributing - and less experienced engineers also becoming frustrated they are not getting the support they need from the rest of the team.</p>
<p>On the occasions I’ve come across this shape, I’ve always used future hiring opportunities to fill out the middle.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this article, I’ve shared the concept of identifying the shape of your team and five common shapes I’ve come across: the triangle, the inverted triangle, the diamond, the rectangle, and hourglass.</p>
<p>While there are likely many other shapes, I hope this approach has offered a unique perspective for identifying the ratios in your own teams and thinking about your future hiring.</p>
<p>I’d love to hear more about the shapes you have in your teams and what you find as advantages and disadvantages of each.</p>


</section>

 ]]></description>
  <category>Technical Leadership</category>
  <guid>https://simonguest.com/p/what-shape-is-your-engineering-team/</guid>
  <pubDate>Tue, 23 Jan 2024 00:00:00 GMT</pubDate>
  <media:content url="https://simonguest.com/p/what-shape-is-your-engineering-team/main.webp" medium="image" type="image/webp"/>
</item>
</channel>
</rss>
